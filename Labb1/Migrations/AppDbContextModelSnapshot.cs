// <auto-generated />
using System;
using Labb1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Labb1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Labb1.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Avalible")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Conn Iggulden",
                            Avalible = true,
                            ImageUrl = "https://bilder.akademibokhandeln.se/images_akb/9789174130348_383/stappens-krigare",
                            Title = "Stäppens krigare"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Bernard Cornwell",
                            Avalible = true,
                            ImageUrl = "https://bilder.akademibokhandeln.se/images_akb/9789186615499_383/azincourt",
                            Title = "Azincourt"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Thomas Erikson",
                            Avalible = true,
                            ImageUrl = "https://s1.adlibris.com/images/43434791/omgiven-av-idioter-hur-man-forstar-dem-som-inte-gar-att-forsta.jpg",
                            Title = "Omgiven av idioter : hur man förstår dem som inte går att förstå"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "David Sundin",
                            Avalible = true,
                            ImageUrl = "https://boktugg.imgix.net/9789179750961.jpg?w=400",
                            Title = "Boken som inte ville bli läst"
                        });
                });

            modelBuilder.Entity("Labb1.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "Anas@qlok.se",
                            FirstName = "Anas",
                            LastName = "Qlok"
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "danne@gmail.se",
                            FirstName = "Daniel",
                            LastName = "Thulin"
                        });
                });

            modelBuilder.Entity("Labb1.Models.CustomerBook", b =>
                {
                    b.Property<int>("CustomerBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerBookId");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBooks");

                    b.HasData(
                        new
                        {
                            CustomerBookId = 1,
                            BookId = 1,
                            CustomerId = 1,
                            LoanDate = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2022, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CustomerBookId = 3,
                            BookId = 2,
                            CustomerId = 2,
                            LoanDate = new DateTime(2021, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2022, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CustomerBookId = 2,
                            BookId = 2,
                            CustomerId = 1,
                            LoanDate = new DateTime(2022, 9, 22, 13, 39, 59, 704, DateTimeKind.Local).AddTicks(1837),
                            ReturnDate = new DateTime(2022, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Labb1.Models.CustomerBook", b =>
                {
                    b.HasOne("Labb1.Models.Book", "Book")
                        .WithMany("CustomerBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labb1.Models.Customer", "Customer")
                        .WithMany("CustomerBooks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
